/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.29
 * Generated at: 2019-11-25 01:10:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class pago_005fen_005flinea_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n");
      out.write("\t\n");
      out.write("\t<!-- Bootstrap CSS -->\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n");
      out.write("\t\n");
      out.write("\t<!--Font-->\n");
      out.write("\t<link href=\"https://fonts.googleapis.com/css?family=Ubuntu&display=swap\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("\t<link rel=\"stylesheet\" href=\"../css/pago_en_linea.css\">\n");
      out.write("\t\n");
      out.write("\n");
      out.write("\t<title>Pago en línea</title>\n");
      out.write("\t<link rel=\"icon\" href=\"../img/favicon.png\">\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\t<div class=\"container\">\n");
      out.write("\n");
      out.write("\t<form class=\"needs-validation\" novalidate action=\"/arrpi/arrpiServlet/PagoEnLinea\">\n");
      out.write("\n");
      out.write("\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t<label for=\"input_codfac\">Código de restaurante</label>\n");
      out.write("\t\t\t\t<input type=\"number\" class=\"form-control\" name = \"input_codfac\" id=\"input_codfac\"  placeholder=\"Léelo bien...\" required>\n");
      out.write("\t\t\t\t<div class=\"invalid-feedback\">\n");
      out.write("\t\t\t\t\tDebe haber un código de factura.\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t<label for=\"input_nombre\">Nombre de usuario</label>\n");
      out.write("\t\t\t\t<input type=\"text\" class=\"form-control\" name = \"input_nombre\" id=\"input_nombre\"  placeholder=\"¡No apellidos!\" required>\n");
      out.write("\t\t\t\t<div class=\"invalid-feedback\">\n");
      out.write("\t\t\t\t\tSegún nuestras fuentes, deberías tener nombre.\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t<label for=\"input_fecha\">Fecha</label>\n");
      out.write("\t\t\t\t<input type=\"text\" class=\"form-control\" name = \"input_fecha\" id=\"input_fecha\"  placeholder=\"AA-MM-DD\" required>\n");
      out.write("\t\t\t\t<div class=\"invalid-feedback\">\n");
      out.write("\t\t\t\t\tMira tu calendario...\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t<label for=\"input_cantidad\">Cantidad</label>\n");
      out.write("\t\t\t\t<input type=\"number\" class=\"form-control\" name = \"input_cantidad\" id=\"input_cantidad\"  placeholder=\"Que sea más de 0...\" required>\n");
      out.write("\t\t\t\t<div class=\"invalid-feedback\">\n");
      out.write("\t\t\t\t\tQue sea maś de 0...\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t\t<div class=\"alert alert-info\" role=\"alert\">\n");
      out.write("\t\t\t\t<h4 class=\"alert-heading\">Resultado</h4>\n");
      out.write("\t\t\t\t<p><strong>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${confirm}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</strong></p>\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t\t<button type=\"submit\" class=\"btn btn-danger enviar\">Enviar</button>\n");
      out.write("\t</form>\n");
      out.write("\t<!-- <div class = \"principal\">\n");
      out.write("\t\t\t<a href=\"index.html\"><img class = \"principaltext\" src= \"../img/principal.png\" alt=\"principal\"></a> \n");
      out.write("\t</div> -->\n");
      out.write("\t<div class = \"arrpi\">\n");
      out.write("\t\t\t<a href=\"../../index.html\"><img class = \"arrpilogo\" src= \"../img/arrpi.png\" alt=\"arrpi\"></a> \n");
      out.write("\t</div> \n");
      out.write("\t\n");
      out.write("\t<script>\n");
      out.write("\t\t\t// Example starter JavaScript for disabling form submissions if there are invalid fields\n");
      out.write("\t\t\t(function() {\n");
      out.write("\t\t\t  'use strict';\n");
      out.write("\t\t\t  window.addEventListener('load', function() {\n");
      out.write("\t\t\t\t// Fetch all the forms we want to apply custom Bootstrap validation styles to\n");
      out.write("\t\t\t\tvar forms = document.getElementsByClassName('needs-validation');\n");
      out.write("\t\t\t\t// Loop over them and prevent submission\n");
      out.write("\t\t\t\tvar validation = Array.prototype.filter.call(forms, function(form) {\n");
      out.write("\t\t\t\t  form.addEventListener('submit', function(event) {\n");
      out.write("\t\t\t\t\tif (form.checkValidity() === false) {\n");
      out.write("\t\t\t\t\t  event.preventDefault();\n");
      out.write("\t\t\t\t\t  event.stopPropagation();\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tform.classList.add('was-validated');\n");
      out.write("\t\t\t\t  }, false);\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t  }, false);\n");
      out.write("\t\t\t})();\n");
      out.write("\t</script>\n");
      out.write("\n");
      out.write("\t<!-- Optional JavaScript -->\n");
      out.write("    <!-- jQuery first, then Popper.js, then Bootstrap JS -->\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\n");
      out.write("\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script>\n");
      out.write("\t<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script> \n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
